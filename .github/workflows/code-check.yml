# This is a basic workflow to help you get started with Actions

name: Code Checks

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the development branch
  pull_request:
    types: [ opened, synchronize, reopened ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  CACHE_VERSION: 1 # Increment this to invalidate the cache.
  JAVA_VERSION: 19

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Build project
        run: ./gradlew spotlessCheck

      - name: detekt
        run: ./gradlew :presentation:detekt

      - name: Unit Test
        run: ./gradlew test
        continue-on-error: true # IMPORTANT: allow pipeline to continue to Android Test Report step

      - name: Android Test Report Action
        uses: asadmansr/android-test-report-action@v1.2.0
        if: ${{ always() }}

  # Based on https://github.com/coil-kt/coil/blob/main/.github/workflows/ci.yml
  instrumentation-tests:
    name: Instrumentation tests
    runs-on: macOS-latest
    timeout-minutes: 30
    strategy:
      fail-fast: true
      matrix:
        # API 21 is flaky and times out.
        api-level: [ 22, 26, 31 ]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: ${{ env.JAVA_VERSION }}
      - run: ./ci_clear_gradle_cache.sh
      - uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ env.CACHE_VERSION }}-${{ hashFiles('**/**.gradle.kts', '**/gradle/wrapper/gradle-wrapper.properties', '**/libs.versions.toml') }}

      # API 30+ emulators only have x86_64 system images.
      - name: Get AVD info
        uses: ./.github/actions/get-avd-info
        id: avd-info
        with:
          api-level: ${{ matrix.api-level }}

      # Retrieve the cached emulator snapshot.
      - uses: actions/cache@v3
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: ${{ runner.os }}-avd-${{ env.CACHE_VERSION }}-${{ steps.avd-info.outputs.arch }}-${{ steps.avd-info.outputs.target }}-${{ matrix.api-level }}

      # Create a new emulator snapshot if it isn't present in the cache.
      - name: Create AVD snapshot
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          arch: ${{ steps.avd-info.outputs.arch }}
          target: ${{ steps.avd-info.outputs.target }}
          disable-animations: false
          force-avd-creation: false
          ram-size: 4096M
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          script: echo "Generated AVD snapshot."

      - name: Instrumentation tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          arch: ${{ steps.avd-info.outputs.arch }}
          target: ${{ steps.avd-info.outputs.target }}
          disable-animations: true
          force-avd-creation: false
          ram-size: 4096M
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none -no-snapshot-save
          script: mv .github/debug.keystore ~/.android; ./gradlew connectedDebugAndroidTest
